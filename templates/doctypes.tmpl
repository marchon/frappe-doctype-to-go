//
// Auto-generated with frappe-doctype-to-go
//
package {{.PkgName}}

import (
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"

	"github.com/jmoiron/jsonq"
)

// {{.Name}} type
type {{.Name}} struct {
  Creation    string `json:"creation,omitempty"`
  Docstatus   int    `json:"docstatus,omitempty"`
  Doctype     string `json:"doctype,omitempty"`
  Modified    string `json:"modified,omitempty"`
  ModifiedBy  string `json:"modified_by,omitempty"`
  Name        string `json:"name,omitempty"`
  Owner       string `json:"owner,omitempty"`
  {{- range .TypeFields}}
  {{.Name}} {{.MappedType}} `json:"{{.JSONName}}{{ if (eq .Required 0)}},omitempty{{end}}"`
  {{- end}}
}
{{$opsType := printf "%s%s" .Name "Ops"}}
// {{$opsType}} Define operations for {{.Name}}
type {{$opsType}} struct {
  Session *Session
}

// Validate run validation for mandatory fields
func (d *{{.Name}}) Validate() (bool, string) {
  {{- range .TypeFields}}
  {{- if eq .Required 1 }}
  {{- if eq .MappedType "string" }}
  if len(d.{{.Name}}) == 0 {
    return false,  "Field '{{.Name}}' cannot be empty"
  }
  {{- end}}
  {{- end}}
  {{- end}}
  return true, ""
}

// New{{$opsType}} Define methods for {{.Name}}
func New{{$opsType}}(s *Session) *{{$opsType}} {
  return &{{$opsType}}{
    Session: s,
  }
}

// Create creates a new {{.Name}} in ERPNext
func (c *{{$opsType}}) Create(doc *{{.Name}}) (err error) {
  if isValid, msg := doc.Validate(); !isValid {
		return errors.New(msg)
	}

	u := fmt.Sprintf("%s/resource/{{.Name}}", c.Session.ApiURL)
  req := &httpRequest{
		Method:      http.MethodPost,
		URLEndpoint: u,
    Body:        doc,
		Session:     c.Session,
	}

	res, err := makeRequest(req)
	if err != nil {
		return
	}

	defer res.Body.Close()
	return
}

// Delete an existing {{.Name}} from ERPNext
func (c *{{$opsType}}) Delete(key string) (err error) {
	u := fmt.Sprintf("%s/resource/{{.Name}}/%s", c.Session.ApiURL, key)
  req := &httpRequest{
		Method:      http.MethodDelete,
		URLEndpoint: u,
	}

  res, err := makeRequest(req)
	if err != nil {
		return
	}

	defer res.Body.Close()
	return
}

// Update an existing {{.Name}} in ERPNext
func (c *{{$opsType}}) Update(doc *{{.Name}}) (err error) {
  if isValid, msg := doc.Validate(); !isValid {
		return errors.New(msg)
	}

	u := fmt.Sprintf("%s/resource/{{.Name}}", c.Session.ApiURL)
  req := &httpRequest{
		Method:      http.MethodPut,
		URLEndpoint: u,
    Body:        doc,
		Session:     c.Session,
	}

	res, err := makeRequest(req)
	if err != nil {
		return
	}

	defer res.Body.Close()
	return
}

// Get an existing {{.Name}} from ERPNext
func (c *{{$opsType}}) Get(key string) (doc {{.Name}}, err error) {
  u := fmt.Sprintf("%s/resource/{{.Name}}/%s", c.Session.ApiURL, key)
	req := &httpRequest{
		Method:      http.MethodGet,
		URLEndpoint: u,
		Session:     c.Session,
	}
  
	res, err := makeRequest(req)
	if err != nil {
		return
	}

	defer res.Body.Close()
	if docType, err := getDocType(res.Body); err == nil {
		err = json.Unmarshal(docType, &doc)
	}

	return
}

// Filter retrieves {{.Name}} based on a filter from ERPNext
func (c *{{$opsType}}) Filter(filter *Filter) (docs []{{.Name}}, err error)  {
  f := fmt.Sprintf(`[["%s", "%s", "%s", "%s"]]`, filter.DocType, filter.Key, filter.Operation, filter.Value)
	u := fmt.Sprintf("%s/resource/%s?filters=%s", c.Session.ApiURL, filter.DocType, url.QueryEscape(f))
	req := &httpRequest{
		Method:      http.MethodGet,
		URLEndpoint: u,
		Session:     c.Session,
	}
  
	res, err := makeRequest(req)
	if err != nil {
		return
	}

	defer res.Body.Close()

	data := map[string]interface{}{}
	dec := json.NewDecoder(res.Body)
	if e := dec.Decode(&data); e == io.EOF {
		return
	}

	jq := jsonq.NewQuery(data)
	results, err := jq.ArrayOfObjects("data")
	if err != nil {
		return
	}

	// Retrieve docs details for each
	for _, result := range results {
		key := result["name"].(string)
		if doc, err := c.Get(key); err == nil {
			docs = append(docs, doc)
		}
	}

  return
}